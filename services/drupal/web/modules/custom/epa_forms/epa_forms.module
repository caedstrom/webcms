<?php

/**
 * @file
 * Contains epa_forms.module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Session\AccountInterface;
use Drupal\webform\Entity\Webform;

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function epa_forms_node_insert(EntityInterface $entity) {
  // Disable hook during migration.
  if (drupal_static('epa_node_migration', FALSE)) {
    return;
  }

  if ($entity->bundle() == 'webform' && $entity->get('webform')->isEmpty()) {
    $title = $entity->label();
    $machine_name = $entity->get('field_machine_name')->getValue();
    $label = !empty($machine_name) ? $machine_name : $title;
    $id = preg_replace('@[^a-z0-9-]+@', '_', strtolower($label));
    $id = substr($id, 0, 24);
    $id .= '_' . $entity->id();

    $settings = Webform::getDefaultSettings();
    $settings['form_disable_remote_addr'] = TRUE;

    $webform = Webform::create([
      'id' => $id,
      'title' => $title,
      'settings' => $settings,
    ]);
    $webform->save();

    $entity->get('webform')->target_id = $id;
    $entity->save();

    \Drupal::messenger()->addStatus(t('Webform %label has been created.', ['%label' => $webform->toLink()->toString()]));
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function epa_forms_node_delete(EntityInterface $entity) {
  // Disable hook during migration.
  if (drupal_static('epa_node_migration', FALSE)) {
    return;
  }

  if ($entity->bundle() == 'webform' && !$entity->get('webform')->isEmpty()) {
    $webform = $entity->get('webform')->entity;
    $webform->delete();
    \Drupal::messenger()->addStatus(t('The Webform %label has been deleted.', ['%label' => $webform->label()]));
  }
}

/**
 * Implements hook_form_alter().
 */
function epa_forms_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'node_webform_form':
      $form['webform']['#access'] = FALSE;
      break;

    case 'node_webform_edit_form':
      $node = $form_state->getFormObject()->getEntity();
      if (!empty($node) && !$node->get('webform')->isEmpty() && $webform = $node->get('webform')->entity) {
        $form['webform']['widget'][0]['target_id']['#access'] = FALSE;
        $form['webform']['widget'][0]['settings']['#open'] = FALSE;

        $weight = $form['webform']['#weight'] - .5;

        $url = $webform->toUrl('edit-form');
        $markup = t('<a href=":url" target="_blank">@title</a>',
          [
            '@title' => $webform->label(),
            ':url' => $url->toString(),
          ]
        );
        $form['webform_link'] = [
          '#type' => 'item',
          '#title' => $form['webform']['widget']['#title'],
          '#markup' => $markup,
          '#weight' => $weight,
        ];
      }
      break;

    case 'node_webform_delete_form':
      $form['webform_description'] = [
        '#markup' => t('This action will also remove any associated webform entity and <strong>delete its submissions</strong>.'),
      ];
      break;

    case 'webform_settings_submissions_form':
      if (isset($form['submission_behaviors']['form_disable_remote_addr'])) {
        $form['submission_behaviors']['form_disable_remote_addr']['#access'] = FALSE;
      }
      break;

    case 'webform_ui_element_form':
      if (isset($form['properties']['form']['display_container']['description_display']['#options']['tooltip'])) {
        unset($form['properties']['form']['display_container']['description_display']['#options']['tooltip']);
      }

  }
}

/**
 * Implements hook_ENTITY_TYPE_access().
 *
 * Infer access through content type referencing webform.
 */
function epa_forms_webform_access(EntityInterface $entity, $operation, AccountInterface $account) {
  switch ($operation) {
    // Always deny access to delete or duplicate.
    case 'duplicate':
    case 'delete':
      return AccessResult::forbidden();
      break;

    // Infer access from node access when viewing or updating.
    case 'view':
    case 'update':
      $node = _epa_forms_get_webform_referencing_node($entity);
      return empty($node) ? AccessResult::neutral() : $node->access($operation, $account, TRUE);
      break;

    // Custom permissions are provided to view submissions.
    // See epa_forms.group.permissions.yml.
    case 'submission_page':
    case 'submission_view_any':
      $node = _epa_forms_get_webform_referencing_node($entity);
      if (empty($node)) {
        return AccessResult::neutral();
      }
      $groups = \Drupal::service('epa_web_areas.web_areas_helper')->getNodeReferencingGroups($node);
      foreach ($groups as $group) {
        if ($group->hasPermission("view group webform submissions", $account)) {
          return AccessResult::allowed();
        }
      }
      break;
  }

  return AccessResult::neutral();
}

/**
 * Helper function to grab referencing node from webform.
 */
function _epa_forms_get_webform_referencing_node(EntityInterface $entity) {
  $query = \Drupal::entityQuery('node')
    ->condition('type', 'webform')
    ->condition('webform', $entity->id());
  $results = $query->execute();
  // We assume there's only a single node associated with each webform
  $nid = reset($results);
  // Get node from webform.
  if (empty($nid)) {
    return;
  }
  return \Drupal::entityTypeManager()->getStorage('node')->load((int) $nid);
}

/**
 * Implements hook_token_info().
 *
 * Define custom EPA forms tokens.
 */
function epa_forms_token_info() {
  $info['tokens']['site']['web-form-confirmation-message'] = array(
    'name' => t('Webform: Confirmation message'),
    'description' => t('The default confirmation message for webforms.'),
  );

  return $info;
}


/**
 * Implements hook_tokens().
 *
 * Replace tokens with token values
 */
function epa_forms_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = array();

  if ($type == 'site') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        // If the web form confirmation message token is found
        case 'web-form-confirmation-message':
          $replacements[$original] = $message = \Drupal::config('webform.settings')->get('settings')['default_confirmation_message'];
          break;
      }
    }
  }

  return $replacements;
}
